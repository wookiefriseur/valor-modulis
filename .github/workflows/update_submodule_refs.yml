name: UpdateSubmoduleRefs

# 1. updates references to updated submodules
# 2. updates scoop manifests in the bucket

on:
  # Run when ProxyUpdateSubmoduleRefs finishes
  workflow_run:
    workflows: ["ProxyUpdateSubmoduleRefs"]
    types:
      - completed

jobs:
  update_submodule_refs:
    # Skip if there was an error
    if: github.event.workflow_run.conclusion == 'success'

    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
          submodules: recursive
      - run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@users.noreply.github.com"

      - name: Update submodules
        run: |
          $submodules = Get-Content (Join-Path $PWD ".gitmodules") | `
          Where-Object { $_ -match 'path' } | `
          ForEach-Object { ($_ -split '=' | Select-Object -Last 1 | Out-String).Trim() }
          # Get the latest releases
          foreach ($submodule in $submodules) {
            Push-Location $submodule
            $repo = "$(git config --get remote.origin.url)".Replace("https://github.com/", "").Replace(".git", "")
            try {
              $latestReleaseJson = Invoke-WebRequest -ErrorAction Stop -Uri "https://api.github.com/repos/$repo/releases/latest"
              $latestRelease = ($latestReleaseJson | ConvertFrom-Json -ErrorAction Stop).tag_name
              if ($latestRelease -eq $null) { throw "No release" }
              git fetch origin $latestRelease
              git checkout $latestRelease
            } catch {
              Write-Host "⚠️ Skipping $repo . No release or error: $_"
            } finally {
              Pop-Location
            }
          }

      - name: Update scoop manifests
        id: update_manifests
        run: |
          . .scripts/updateScoopPSManifest.ps1 # Update-ScoopPSManifest
          $changes = ""
          foreach($module in $(Get-ChildItem -Path .\psmodules\ -Directory)) {
            $modDir = $module.Name
            $changedMod = Update-ScoopPSManifest -ScoopManifestDir ".\bucket\" -PSManifestDir ".\psmodules\$modDir\"
            if($changedMod.Length -lt 1) { continue }
            Write-Output "Updating $changedMod"
            $changes += "$changedMod "
          }
          $changes = $changes.Trim()
          if($changes.Length -lt 1) {
            throw "🔥 No changes detected, aborting flow! 🔥"
          }
          Write-Output "CHANGES=$changes" >> $env:GITHUB_OUTPUT

      - name: Commit the changes
        run: |
          git add --all
          git commit -m "Updated: ${{ steps.update_manifests.outputs.CHANGES }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
